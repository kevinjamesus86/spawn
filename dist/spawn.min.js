/**
 * spawn! event-driven web workers for modern browsers
 * @version v0.2.0 - 2015-05-31
 * @author Kevin James <kevinjamesus86@gmail.com>
 * Copyright (c) 2015 Kevin James
 * Licensed under the MIT license.
 * https://github.com/kevinjamesus86/spawn
 */
!function(a,b){"function"==typeof define&&define.amd?define([],b):"object"==typeof exports?module.exports=b():a.spawn=b()}(this,function(){"use strict";function a(a){this.isMainThread=!0;var d,e="";"string"==typeof a?d=a:"function"==typeof a&&(e=f(a)),this.file=c.createObjectURL(new Blob([g+e],{type:"application/javascript"})),this.worker=new b(this.file),this._init(),d&&this.importScripts(d)}var b=window.Worker,c=window.URL||window.webkitURL,d=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,e=/^function\s*[^{]*\{([\s\S]*)\}$/m,f=function(a){return a.toString().replace(d,"").replace(e,"$1")};a.fn=a.prototype,a.fn.uuid=function(){var a=this.isMainThread?"spawn_":"worker_";return a+Date.now().toString(32)+Math.random().toString(32)},a.fn.location={origin:location.origin||location.protocol+"//"+location.host,originPath:location.href.match(/^(.*\/)?(?:$|(.+?)(?:(\.[^.]*$)|$))/)[1].replace(/\/?$/,"")+"/"},a.fn.on=function(a,b){return this.callbacks[a]=this.callbacks[a]||[],this.callbacks[a].push(b),this},a.fn.emit=function(a,b,c,d){var e=!1;return"function"==typeof b?(c=b,b=null):"string"==typeof c&&(d=c),d=d||this.uuid(),"function"==typeof c&&(this.acks[d]=c,e=!0),this.worker.postMessage({id:d,event:a,data:b,ack:e}),this},a.fn._invoke=function(a,b,c,d){function e(a){d&&g.emit("spawn_ack",a,c)}var f=this.callbacks[a],g=this;if(f)for(var h=f.length,i=-1;++i<h;)f[i].call(g,b,e)},a.fn.close=function(){return this.isWorker?(this.emit("spawn_close"),this.worker.close()):(this.closed=!0,this.worker.terminate(),c.revokeObjectURL(this.file),this.on=this.emit=this.close=this["import"]=this.importScripts=function(){return this},this.worker.onerror=this.worker.onmessage=this.acks=this.callbacks=this.file=this.worker=null),this},a.fn.importScripts=function(){var a=Array.prototype.slice.call(arguments,0);if(this.isMainThread)this.emit("spawn_import",a);else{for(var b,c=a.length,d=-1;++d<c;)b=a[d],"/"===b.charAt(0)?a[d]=this.location.origin+b:/^https?:/.test(b)||(a[d]=this.location.originPath+b);importScripts.apply(self,a)}return this},a.fn._init=function(){var a=this;a.acks={},a.callbacks={},a.worker.onmessage=function(b){var c,d=b.data.data,e=b.data.event,f=b.data.id;switch(e){case"spawn_ack":c=a.acks[f],delete a.acks[f],c.call(a,d);break;case"spawn_import":a.importScripts.apply(a,d);break;case"spawn_close":a.close();break;default:a._invoke(e,d,f,b.data.ack)}},a.isMainThread&&(a.worker.onerror=function(b){a._invoke("error",b)})};var g=function(){var b=Object.keys(a.fn).reduce(function(b,c){var d=a.fn[c];return d="function"==typeof d?d.toString():JSON.stringify(d),b+"Spawn.fn."+c+"="+d+";"},"");return["self.spawn = (function() {","function Spawn() {","this.isWorker = true;","this.worker = self;","this._init();","}","Spawn.fn=Spawn.prototype;",b,"return new Spawn;","})();"].join("\n")}();return function(b){return new a(b)}});